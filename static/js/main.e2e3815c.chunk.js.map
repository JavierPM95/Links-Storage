{"version":3,"sources":["firebase.js","components/LinksForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["fs","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","LinksForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","className","onSubmit","preventDefault","str","test","toast","type","addOrEditLink","placeholder","onChange","rows","Links","links","setLinks","setCurrentId","openModal","setopenModal","linkObject","set","update","openModified","deleteLink","window","confirm","delete","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","href","rel","Modal","isOpen","ModalHeader","ModalBody","FormGroup","Label","for","Input","placehorlder","ModalFooter","Button","color","App","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2e3815c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\n\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAoebQ-U6ByO-KSWq9wVYQ8zDiIt-n3zaI\",\r\n    authDomain: \"fir-crud-react-9e34e.firebaseapp.com\",\r\n    databaseURL: \"https://fir-crud-react-9e34e.firebaseio.com\",\r\n    projectId: \"fir-crud-react-9e34e\",\r\n    storageBucket: \"fir-crud-react-9e34e.appspot.com\",\r\n    messagingSenderId: \"205287111367\",\r\n    appId: \"1:205287111367:web:213e096f45cc5710c2dce2\",\r\n    measurementId: \"G-V42M3N6015\"\r\n  };\r\n  // Initialize Firebase\r\n const fb =  firebase.initializeApp(firebaseConfig);\r\n\r\nexport const fs = fb.firestore();","import React, {useState, useEffect} from 'react';\r\nimport { fs } from '../firebase';\r\nimport {toast} from 'react-toastify';\r\n\r\nconst LinksForm = (props) => {\r\n\r\n    const initialStateValues = {\r\n        url: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n    };\r\n\r\nconst [values, setValues] = useState(initialStateValues)\r\n\r\nconst handleInputChange = (e) => {\r\n    const {name, value} =e.target;\r\n    setValues({...values, [name]: value})\r\n};\r\n\r\nconst validateUrl = (str) => {\r\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(str);\r\n}\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!validateUrl(values.url)) {\r\n            return toast('Invalid URL', {type: 'warning'})\r\n        } \r\n        props.addOrEditLink(values);\r\n        setValues({initialStateValues})\r\n    }\r\n\r\n    const getLinkById = async (id) => {\r\n        const doc = await fs.collection('links').doc(id).get();\r\n        setValues({...doc.data()})\r\n    }\r\n\r\nuseEffect(() => {\r\n    if (props.currentId === '') {\r\n        setValues({...props.initialStateValues})\r\n    } else {\r\n       getLinkById(props.currentId)\r\n    }\r\n}, [props.currentId, props.initialStateValues])\r\n\r\n\r\n    return (\r\n        <form className=\"card card-body\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">insert_link</i>\r\n                </div>\r\n                <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"https://someurl.com\"\r\n                name=\"url\"\r\n                onChange={handleInputChange}\r\n            \r\n                />\r\n            </div>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">create</i>\r\n                </div>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"name\"\r\n                    placeholder=\"Website name\"\r\n                    onChange={handleInputChange}\r\n                \r\n                    />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <textarea \r\n                className=\"form-control\" \r\n                name=\"description\" \r\n                rows=\"3\"\r\n                placeholder=\"Brief description of the webpage\"\r\n                onChange={handleInputChange}\r\n                \r\n                ></textarea>\r\n            </div>\r\n\r\n            <div>\r\n                <button className=\"btn btn-primary btn-lg btn-block\">\r\n                    Create new user\r\n                </button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default LinksForm","import React, { useEffect, useState } from \"react\";\r\nimport LinksForm from \"./LinksForm\";\r\nimport { fs } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\nconst Links = () => {\r\n  const initialStateValues = {\r\n    url: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n  const [links, setLinks] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n  const [openModal, setopenModal] = useState(false);\r\n\r\n  const addOrEditLink = async (linkObject) => {\r\n    if (currentId === \"\") {\r\n      await fs.collection(\"links\").doc().set(linkObject);\r\n      toast(\"New link added\", { type: \"success\" });\r\n      setValues(initialStateValues);\r\n      setCurrentId(\"\");\r\n      \r\n    } else {\r\n      await fs.collection(\"links\").doc(currentId).update(linkObject);\r\n      toast(\"Link updated\", { type: \"info\" });\r\n      openModified();\r\n      setValues(initialStateValues);\r\n      setCurrentId(\"\");\r\n      setLinks([])\r\n    }\r\n  };\r\n\r\n  //    const modified = async (linkObject) => {\r\n  //        console.log(currentId)\r\n  //        await fs.collection('links').doc(currentId).update(linkObject);\r\n  //    }\r\n\r\n  const deleteLink = async (id) => {\r\n    if (window.confirm(\"Are you sure do you want to delete this link?\")) {\r\n      await fs.collection(\"links\").doc(id).delete();\r\n      toast(\"Link deleted\", { type: \"error\" });\r\n    }\r\n  };\r\n\r\n  const getLinks = () => {\r\n    fs.collection(\"links\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setLinks(docs);\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //    modified(values);\r\n    setValues({ ...initialStateValues });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const getLinkById = async (id) => {\r\n    const doc = await fs.collection(\"links\").doc(id).get();\r\n    setValues({ ...doc.data() });\r\n  };\r\n  useEffect(() => {\r\n    getLinks();\r\n    if (currentId !== \"\") getLinkById(currentId);\r\n  }, [currentId]);\r\n\r\n  const openModified = () => {\r\n    setopenModal(!openModal);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-4 p-2\">\r\n        <LinksForm {...{ addOrEditLink, currentId, links}} />\r\n      </div>\r\n      <div className=\"col-md-8 p-2\">\r\n        {links.map((link) => (\r\n          <div className=\"card mb-3\" key={link.id}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4>{link.name}</h4>\r\n                <div>\r\n                  <i\r\n                    className=\"material-icons text-primary\"\r\n                    onClick={() => {\r\n                      setCurrentId(link.id);\r\n                      openModified();\r\n                    }}\r\n                  >\r\n                    create\r\n                  </i>\r\n                  <i\r\n                    className=\"material-icons text-danger\"\r\n                    onClick={() => deleteLink(link.id)}\r\n                  >\r\n                    close\r\n                  </i>\r\n                </div>\r\n              </div>\r\n              <p>{link.description} </p>\r\n              <a\r\n                className=\"btn btn-sm btn-primary\"\r\n                href={link.url}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Go to {link.name}\r\n              </a>\r\n            </div>\r\n\r\n            <div></div>\r\n          </div>\r\n        ))}\r\n\r\n        <Modal isOpen={openModal} onSubmit={handleSubmit}>\r\n          <ModalHeader>\r\n            <h2>What do you like to modified?</h2>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label for=\"urlAdress\">Url Address</Label>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"urlAddress\"\r\n                name=\"url\"\r\n                onChange={handleInputChange}\r\n                value={values.url}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"websiteName\">Website Name</Label>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"websiteName\"\r\n                name=\"name\"\r\n                onChange={handleInputChange}\r\n                value={values.name}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"description\">Description</Label>\r\n              <Input\r\n                type=\"textarea\"\r\n                name=\"description\"\r\n                id=\"description\"\r\n                rows=\"3\"\r\n                placehorlder=\"Brief description of the page\"\r\n                onChange={handleInputChange}\r\n                value={values.description}\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={() => addOrEditLink(values)}>\r\n              Update\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={() => {openModified(); setValues(initialStateValues); setCurrentId(\"\")}}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React from 'react';\nimport './App.css';\n\n//Imports\nimport Links from './components/Links';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction App() {\n  return (\n  <div className=\"container p-4\">\n    <h1 className=\"title\">Links Storage <span role=\"img\" aria-label=\"rocket\">🚀</span></h1>\n    <h2 className=\"subtitle pb-4\">Manage multiples links and save them. All thanks to FireBase</h2>\n    <div className=\"row\">\n      <Links/>\n      <ToastContainer/>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//Imports Terceras\nimport './firebase'\nimport 'bootswatch/dist/pulse/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}